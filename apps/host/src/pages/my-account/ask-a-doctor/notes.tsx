import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import MyAccountLoader from "@/components/skeleton_loader/myAccount/MyAccountLoader";
import {
  USER_TYPE,
  menuItemConstants,
  subMenuItems,
} from "@root/host/src/constants/common.constants";
import { MyAccountDTO } from "@root/patient/src/types/MyAccount.types";
import { useHasInHousePxsContext } from "@/contexts/ HasInHousePxs/ HasInHousePxsContext";
import { RuntimeVarContext } from "@/contexts/RuntimeVarContext";
import { useContext, useEffect, useState } from "react";
import { getDetails } from "@root/host/src/utils/getSessionData";
const MyAccount = dynamic(() => import("patient/MyAccount"), {
  ssr: false,
  loading: () => <MyAccountLoader />,
}) as React.FunctionComponent<MyAccountDTO>;

export default function MyAccountDoctorNotes() {
  const env = useContext(RuntimeVarContext);
  const { userHasInHousePxs, checkPrescriptionData } =
    useHasInHousePxsContext();
  const router = useRouter();
  const [userType, setUserType] = useState(USER_TYPE.ANONYMOUS);

  useEffect(() => {
    if (userHasInHousePxs.myAcct === false) {
      router.push("/my-account/my-profile/");
    }
  }, [userHasInHousePxs.myAcct]);

  useEffect(() => {
    getDetails().then((user) => {
      setUserType(
        user?.authData?.userType
          ? user?.authData?.userType
          : USER_TYPE.ANONYMOUS
      );
    });
  }, [typeof window !== "undefined" && localStorage.getItem("session")]);

  useEffect(() => {
    if (userType === USER_TYPE.ASSOCIATE) {
      router.push("/");
    }
  }, [userType]);

  return (
    <>
      <Head>
        <title>My Account | Stanton Optical</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      {userType !== USER_TYPE.ASSOCIATE && (
        <MyAccount
          env={env}
          selectedMenuItem={menuItemConstants.MY_ACCOUNT_DOCTOR_NOTES}
          doctorConsultation={{
            userHasInHousePxs: userHasInHousePxs.myAcct || false,
            checkPrescriptionData,
          }}
        />
      )}
    </>
  );
}
